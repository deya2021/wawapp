# ================= WawApp ‚Äì Apply Core Fixes =================
$ErrorActionPreference='Stop'

# 0) Locate client path (supports both root/apps/... and root/...)
$root = (Resolve-Path "$PWD").Path
$candidates = @("$root\\apps\\wawapp_client", "$root\\wawapp_client")
$clientPath = $null
foreach($c in $candidates){ if(Test-Path $c){ $clientPath=(Resolve-Path $c).Path; break } }
if(-not $clientPath){ throw 'Client path not found' }

$lib          = Join-Path $clientPath "lib"
$featuresDir  = Join-Path $lib "features"
$homeDir      = Join-Path $featuresDir "home"
$quoteDir     = Join-Path $featuresDir "quote"
$trackDir     = Join-Path $featuresDir "track"
$trackModels  = Join-Path $trackDir "models"
$coreDir      = Join-Path $lib "core"
$themeDir     = Join-Path $coreDir "theme"
$l10nDir      = Join-Path $lib "l10n"
$genHintFile  = Join-Path $lib "generated\\README.txt"

$androidDir   = Join-Path $clientPath "android"
$appDir       = Join-Path $androidDir "app"
$manMainDir   = Join-Path $appDir "src\\main"

# 1) Ensure directories
New-Item -ItemType Directory -Force -Path $homeDir,$quoteDir,$trackDir,$trackModels,$themeDir,$l10nDir,$appDir,$manMainDir | Out-Null

# 2) Placeholder screens + model (only create if missing)
$homeFile = Join-Path $homeDir "home_screen.dart"
if(-not (Test-Path $homeFile)){
@"
import 'package:flutter/material.dart';

class HomeScreen extends StatelessWidget {
  const HomeScreen({super.key});
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Home')),
      body: const Center(child: Text('Welcome to WawApp', style: TextStyle(fontSize: 24))),
    );
  }
}
"@ | Out-File $homeFile -Encoding UTF8
}

$quoteFile = Join-Path $quoteDir "quote_screen.dart"
if(-not (Test-Path $quoteFile)){
@"
import 'package:flutter/material.dart';

class QuoteScreen extends StatelessWidget {
  const QuoteScreen({super.key});
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Quote')),
      body: const Center(child: Text('Quote Screen')),
    );
  }
}
"@ | Out-File $quoteFile -Encoding UTF8
}

$orderModel = Join-Path $trackModels "order.dart"
if(-not (Test-Path $orderModel)){
@"
class Order {
  final String id;
  final String userId;
  final String status;
  final double price;
  final double distanceKm;
  final DateTime createdAt;

  Order({
    required this.id,
    required this.userId,
    required this.status,
    required this.price,
    required this.distanceKm,
    required this.createdAt,
  });

  Map<String, dynamic> toJson() => {
    'id': id,
    'userId': userId,
    'status': status,
    'price': price,
    'distanceKm': distanceKm,
    'createdAt': createdAt.toIso8601String(),
  };
}
"@ | Out-File $orderModel -Encoding UTF8
}

$trackFile = Join-Path $trackDir "track_screen.dart"
if(-not (Test-Path $trackFile)){
@"
import 'package:flutter/material.dart';
import 'models/order.dart';

class TrackScreen extends StatelessWidget {
  final Order? order;
  const TrackScreen({super.key, this.order});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Track Order')),
      body: Center(child: Text('Track order: `${order?.id ?? "Not specified"}')),
    );
  }
}
"@ | Out-File $trackFile -Encoding UTF8
}

# 3) AppTheme (if missing)
$appTheme = Join-Path $themeDir "app_theme.dart"
if(-not (Test-Path $appTheme)){
@"
import 'package:flutter/material.dart';

class AppTheme {
  static ThemeData get lightTheme => ThemeData(
    useMaterial3: true,
    colorScheme: ColorScheme.fromSeed(seedColor: Color(0xFF0A8F4D), brightness: Brightness.light),
    appBarTheme: const AppBarTheme(centerTitle: true, elevation: 0),
  );

  static ThemeData get darkTheme => ThemeData(
    useMaterial3: true,
    colorScheme: ColorScheme.fromSeed(seedColor: Color(0xFF0A8F4D), brightness: Brightness.dark),
    appBarTheme: const AppBarTheme(centerTitle: true, elevation: 0),
  );
}
"@ | Out-File $appTheme -Encoding UTF8
}

# 4) L10n ARB files (if missing)
$arbAR = Join-Path $l10nDir "intl_ar.arb"
if(-not (Test-Path $arbAR)){
@"
{
  "@@locale": "ar",
  "appTitle": "WawApp Client"
}
"@ | Out-File $arbAR -Encoding UTF8
}
$arbEN = Join-Path $l10nDir "intl_en.arb"
if(-not (Test-Path $arbEN)){
@"
{
  "@@locale": "en",
  "appTitle": "WawApp Client"
}
"@ | Out-File $arbEN -Encoding UTF8
}

# (Hint file to remember generating)
New-Item -ItemType Directory -Force -Path (Split-Path $genHintFile) | Out-Null
@"
This folder will be generated by intl_utils or Flutter Intl.
Run:
  flutter pub get
  flutter pub run intl_utils:generate
"@ | Out-File $genHintFile -Encoding UTF8

# 5) Android Gradle files
# 5.1 settings.gradle.kts
$settingsGradle = Join-Path $androidDir "settings.gradle.kts"
if(-not (Test-Path $settingsGradle)){
@"
pluginManagement {
    val flutterSdkPath = run {
        val p = java.util.Properties()
        file("local.properties").inputStream().use { p.load(it) }
        p.getProperty("flutter.sdk")
    }
    includeBuild("`$flutterSdkPath/packages/flutter_tools/gradle")
    repositories { google(); mavenCentral(); gradlePluginPortal() }
}
plugins {
    id("dev.flutter.flutter-plugin-loader") version "1.0.0"
    id("com.android.application") version "8.5.0" apply false
    id("org.jetbrains.kotlin.android") version "1.9.24" apply false
}
include(":app")
"@ | Out-File $settingsGradle -Encoding UTF8
}

# 5.2 gradle.properties
$gradleProps = Join-Path $androidDir "gradle.properties"
if(-not (Test-Path $gradleProps)){
@"
org.gradle.jvmargs=-Xmx4G -XX:MaxMetaspaceSize=1G -Dkotlin.daemon.jvm.options="-Xmx2G"
android.useAndroidX=true
android.enableJetifier=true
"@ | Out-File $gradleProps -Encoding UTF8
}

# 5.3 app/build.gradle.kts (create if missing)
$appGradle = Join-Path $appDir "build.gradle.kts"
if(-not (Test-Path $appGradle)){
@"
plugins {
    id("com.android.application")
    id("org.jetbrains.kotlin.android")
    id("dev.flutter.flutter-gradle-plugin")
    id("com.google.gms.google-services")
}
android {
    namespace = "com.wawapp.client"
    compileSdk = 34
    defaultConfig {
        applicationId = "com.wawapp.client"
        minSdk = 23
        targetSdk = 34
        versionCode = flutter.versionCode()
        versionName = flutter.versionName()
        multiDexEnabled = true
    }
    buildTypes {
        release {
            isMinifyEnabled = false
            signingConfig = signingConfigs.getByName("debug")
        }
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }
    kotlinOptions { jvmTarget = "1.8" }
}
flutter { source = "../.." }
dependencies {
    implementation(platform("com.google.firebase:firebase-bom:33.4.0"))
    implementation("com.google.firebase:firebase-analytics")
    implementation("com.google.firebase:firebase-messaging")
    implementation("androidx.multidex:multidex:2.0.1")
}
"@ | Out-File $appGradle -Encoding UTF8
}

# 6) Defensive Firebase init patch (non-destructive):
$mainFile = Join-Path $lib "main.dart"
if(Test-Path $mainFile){
  $content = Get-Content $mainFile -Raw
  if($content -notmatch "Firebase initialized successfully"){
    $content = $content -replace "void\s+main\(\)\s+async\s*\{","void main() async {`n  try {`n"
    if($content -notmatch "FirebaseMessaging\.instance\.requestPermission"){
      $content = $content -replace "Firebase\.initializeApp\([^;]+;\s*\)","Firebase.initializeApp(options: DefaultFirebaseOptions.currentPlatform);`n    print('‚úÖ Firebase initialized successfully');`n    final messaging = FirebaseMessaging.instance;`n    final settings = await messaging.requestPermission(alert: true, badge: true, sound: true);`n    if (settings.authorizationStatus == AuthorizationStatus.authorized) {`n      final token = await messaging.getToken().timeout(const Duration(seconds: 10), onTimeout: () => null);`n      print('üîë FCM Token: `${token ?? \"Not available\"}');`n    }"
    }
    if($content -notmatch "catch\s*\(e\)"){
      $content = $content -replace "runApp\(","  } catch (e) { print('‚ùå Firebase initialization error: `$e'); }`n  runApp("
    }
    Set-Content -Path $mainFile -Value $content -Encoding UTF8
  }
}

# 7) Remind about google-services.json
$gs = Join-Path $appDir "google-services.json"
if(-not (Test-Path $gs)){
  Write-Warning "google-services.json not found. Download from Firebase Console: $gs"
}

Write-Host "`n‚úÖ Core fixes applied successfully."
Write-Host "Next steps:"
Write-Host "1) flutter clean"
Write-Host "2) flutter pub get"
Write-Host "3) flutter pub run intl_utils:generate"
Write-Host "4) flutter run -v"
# =============================================================